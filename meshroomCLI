#!/usr/bin/env python3
"""
Based on: http://filmicworlds.com/blog/command-line-photogrammetry-with-alicevision/
export LD_LIBRARY_PATH=$HOME/.local/Meshroom-2020.1.0/aliceVision/lib
"""

from argparse import ArgumentParser
from functools import partial
from pathlib import Path
from subprocess import run

LD_LIBRARY_PATH = Path.home() / ".local/Meshroom-2020.1.0/aliceVision/lib/"

CAMERA_INITIALIZATION_DIRNAME = "CameraInitialization"
CAMERA_SFM_FILENAME = "cameraInit.sfm"

FEATURE_EXTRACTION_DIRNAME = "FeatureExtraction"

IMAGE_MATCHING_DIRNAME = "ImageMatching"
IMAGE_MATCHING_FILENAME = "imageMatches.txt"

FEATURE_MATCHING_DIRNAME = "FeatureMatching"

STRUCTURE_FROM_MOTION_DIRNAME = "StrctureFromMotion"
STRUCTURE_FROM_MOTION_SFM_FILENAME = "strctureFromMotion.sfm"
SFM_VIEWS_POSES_SFM_FILENAME = "SFMViewsPoses.sfm"

def run_cmd_and_print_results(verbose, silent, cmd, step_name):

    if verbose:
        print("-" * 16)

    if not silent:
        print("Starting the ", step_name, "step...", end="")

    env = {"LD_LIBRARY_PATH": LD_LIBRARY_PATH}
    cmd_result = run(cmd, capture_output=True, env=env)

    if not silent:
        print("done")

    if verbose:
        cmd_strs = [str(c) if len(str(c)) > 0 else '""' for c in cmd]
        print("Running command:", " ".join(cmd_strs))
        print(cmd_result.stdout.decode("utf-8"))

    if cmd_result.returncode != 0:
        print(cmd_result.stderr.decode("utf-8"))

    return cmd_result.returncode == 0


def initialize_camera(output: Path, meshroom: Path, image: Path, handle_cmd) -> bool:

    odir = output / CAMERA_INITIALIZATION_DIRNAME
    odir.mkdir(exist_ok=True)

    camera_init_bin = meshroom / "aliceVision" / "bin" / "aliceVision_cameraInit"

    cmd = [
        camera_init_bin,
        "--imageFolder",
        image,
        "--sensorDatabase",
        "",
        "--output",
        odir / CAMERA_SFM_FILENAME,
        "--defaultFieldOfView",
        "45.0",
        "--verboseLevel",
        "info",
        "--allowSingleView",
        "1",
    ]

    # Return True if operation is successful
    return handle_cmd(cmd, "camera initialization")


def extract_features(output: Path, meshroom: Path, num_images: int, handle_cmd) -> bool:

    odir = output / FEATURE_EXTRACTION_DIRNAME
    odir.mkdir(exist_ok=True)

    camera_sfm_filepath = output / CAMERA_INITIALIZATION_DIRNAME / CAMERA_SFM_FILENAME

    feature_extraction_bin = (
        meshroom / "aliceVision" / "bin" / "aliceVision_featureExtraction"
    )

    cmd = [
        feature_extraction_bin,
        "--input",
        camera_sfm_filepath,
        "--output",
        odir,
        "--describerTypes",
        "sift",
        "--verboseLevel",
        "info",
        "--describerPreset",
        "normal",
        "--rangeStart",
        "0",
        "--rangeSize",
        str(num_images),
    ]

    # Return True if operation is successful
    return handle_cmd(cmd, "feature extraction")


def image_matching(output: Path, meshroom: Path, handle_cmd) -> bool:

    odir = output / IMAGE_MATCHING_DIRNAME
    odir.mkdir(exist_ok=True)

    image_matching_bin = meshroom / "aliceVision" / "bin" / "aliceVision_imageMatching"

    camera_sfm_filepath = output / CAMERA_INITIALIZATION_DIRNAME / CAMERA_SFM_FILENAME

    features_dir = output / FEATURE_EXTRACTION_DIRNAME

    cmd = [
        image_matching_bin,
        "--input",
        camera_sfm_filepath,
        "--featuresFolders",
        features_dir,
        "--output",
        odir / IMAGE_MATCHING_FILENAME,
        "--minNbImages",
        "200",
        "--tree",
        "",
        "--maxDescriptors",
        "500",
        "--verboseLevel",
        "info",
        "--weights",
        "",
        "--nbMatches",
        "50",
    ]

    # Return True if operation is successful
    return handle_cmd(cmd, "image matching")


def feature_matching(output: Path, meshroom: Path, handle_cmd) -> bool:
    
    odir = output / FEATURE_MATCHING_DIRNAME
    odir.mkdir(exist_ok=True)

    feature_matching_bin = meshroom / "aliceVision" / "bin" / "aliceVision_featureMatching"

    camera_sfm_filepath = output / CAMERA_INITIALIZATION_DIRNAME / CAMERA_SFM_FILENAME

    features_dir = output / FEATURE_EXTRACTION_DIRNAME

    image_pairs_filepath = output / IMAGE_MATCHING_DIRNAME / IMAGE_MATCHING_FILENAME

    cmd = [
        feature_matching_bin,
        "--input",
        camera_sfm_filepath,
        "--output",
        odir,
        "--featuresFolders",
        features_dir,
        "--imagePairsList", 
        image_pairs_filepath,
        "--photometricMatchingMethod",
        "ANN_L2",
        "--verboseLevel",
        "info",
        "--describerTypes",
        "sift",
        "--maxMatches",
        "0",
        "--exportDebugFiles",
        "False",
        "--savePutativeMatches",
        "False",
        "--guidedMatching",
        "False",
        "--geometricEstimator",
        "acransac",
        "--geometricFilterType",
        "fundamental_matrix",
        "--maxIteration",
        "2048", 
        "--distanceRatio",
        "0.8"
    ]

    # Return True if operation is successful
    return handle_cmd(cmd, "feature matching")

def structure_from_motion(output: Path, meshroom: Path, handle_cmd) -> bool:
    
    odir = output / STRUCTURE_FROM_MOTION_DIRNAME
    odir.mkdir(exist_ok=True)

    structure_from_motion_bin = meshroom / "aliceVision" / "bin" / "aliceVision_incrementalSfM"

    camera_sfm_filepath = output / CAMERA_INITIALIZATION_DIRNAME / CAMERA_SFM_FILENAME

    features_dir = output / FEATURE_EXTRACTION_DIRNAME

    feature_matches_dir = output / FEATURE_MATCHING_DIRNAME

    cmd = [
        structure_from_motion_bin,
        "--input",
        camera_sfm_filepath,
        "--output",
        odir / STRUCTURE_FROM_MOTION_SFM_FILENAME,
        "--featuresFolders",
        features_dir,
        "--matchesFolders",
        feature_matches_dir,
        "--outputViewsAndPoses",
        odir / SFM_VIEWS_POSES_SFM_FILENAME,
        "--extraInfoFolder",
        odir,
        "--minAngleForLandmark",
        "2.0",
        "--minNumberOfObservationsForTriangulation",
        "2",
        "--maxAngleInitialPair",
        "40.0",
        "--maxNumberOfMatches",
        "0",
        "--localizerEstimator",
        "acransac",
        "--describerTypes",
        "sift",
        "--lockScenePreviouslyReconstructed",
        "False",
        "--localBAGraphDistance",
        "1",
        # "--initialPairA", (EXPECTS ARGUMENT)
        # "--initialPairB", (EXPECTS ARGUMENT)
        "--interFileExtension",
        ".ply",
        "--useLocalBA",
        "True",
        "--minInputTrackLength",
        "2",
        "--useOnlyMatchesFromInputFolder",
        "False",
        "--verboseLevel",
        "info",
        "--minAngleForTriangulation",
        "3.0",
        "--maxReprojectionError",
        "4.0",
        "--minAngleInitialPair",
        "5.0"
    ]
    
    print(cmd)
    # Return True if operation is successful
    return handle_cmd(cmd, "structure from motion")


def main():
    aparser = ArgumentParser("Run AlliceVision from the command line.")
    aparser.add_argument(
        "meshroom_dir", type=Path, help="Path to the Meshroom directory."
    )
    aparser.add_argument("image_dir", type=Path)
    aparser.add_argument("output_dir", type=Path)
    aparser.add_argument(
        "--verbose", action="store_true", help="Print information for each step."
    )
    aparser.add_argument("--silent", action="store_true", help="Suppress all printing.")
    aparser.add_argument("--run_all", help="Run all Photogrammetry steps.")
    args = aparser.parse_args()

    num_images = len([img for img in Path(args.image_dir).glob("*") if img.is_file()])

    if not args.silent:
        print("Configuration:")
        print(f" Output directory   : {args.output_dir}")
        print(f" Image directory    : {args.image_dir}")
        print(f" Meshroom directory : {args.meshroom_dir}")
        print(f" Number of images   : {num_images}")
        # print(f" Step to run        : {args.step_to_run}")
        # TODO: print steps

    # Create the output directory if it does not already exist
    Path(args.output_dir).mkdir(parents=True, exist_ok=True)

    # Create a function for handling printing (for convienence)
    handle_cmd = partial(run_cmd_and_print_results, args.verbose, args.silent)

    # Run each step
    # if not initialize_camera(
    #     args.output_dir, args.meshroom_dir, args.image_dir, handle_cmd):
    #     raise SystemExit

    # if not extract_features(args.output_dir, args.meshroom_dir, num_images, handle_cmd):
    #     raise SystemExit

    # if not image_matching(args.output_dir, args.meshroom_dir, handle_cmd):
    #     raise SystemExit
    
    if not feature_matching(args.output_dir, args.meshroom_dir, handle_cmd):
        raise SystemExit

    if not structure_from_motion(args.output_dir, args.meshroom_dir, handle_cmd):
        raise SystemExit

if __name__ == "__main__":
    main()
